# -*- coding: utf-8 -*-
"""Assignment2-CS-202151124.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tZ3jp1VbftPx68egBHBT9ZST5rApMMf
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.graphics.gofplots import qqplot

#202151124
#Raghav Agiwal
#Assignment 2

# Importing CSV file JK-Allopathic-Outpatient_attendance-May-2019 and converting it to data frame
allopathic_data=pd.read_csv("/content/JK-Allopathic-Outpatient_attendance-May-2019 (1).csv")

print(allopathic_data)

# calculating total attendence.
allopathic_data['Total_attendence'] = allopathic_data['No. of facilities by performance - 1 to 100'] + allopathic_data['No. of facilities by performance - 101 to 500'] + allopathic_data['No. of facilities by performance - 501 to 1000'] + allopathic_data['No. of facilities by performance - >1000']
# grouping the attendence.
allopathic_data_districtwise=allopathic_data.groupby("District").sum()
# Setting x,y labels, title of plot and plotting the bar graph
ax = sns.barplot(x="Total_attendence",y="District", data=allopathic_data_districtwise)
ax.set_ylabel("District")
ax.set_xlabel("Total Patient Attendence")
ax.set_title("Patient Attendence Plot")

# Create a distributed pivot table.
allopathic_data_district_facility_wise=allopathic_data.pivot_table("Total_attendence",index="District",columns="Facility Type",aggfunc='sum')

# Set x,y label, movie name and draw alignment line
ax = allopathic_data_district_facility_wise.plot(kind='bar', stacked=True)
ax.set_xlabel("District")
ax.set_ylabel("Total Patient Attendence")
ax.set_title("Patient Attendence Plot Facility wise")

# Create a copy of allopathic_data
performance_data=allopathic_data
# Create a region column index with only 5 regions as mentioned above
district_index=performance_data["District"].isin(["Anantnag","Jammu",'Poonch','Reasi','Udhampur'])
performance_data=performance_data[district_index]

# Set x,y label, movie name and draw graphic group
ax=sns.barplot(x="Facility Type",y="Performance - Overall Average **",hue="District",data=performance_data)
ax.set_xlabel("Performance Overall Average")
ax.set_ylabel("Facility Type")
ax.set_title("Patient Overall Performance Plot District wise")
# ax.set_yscale('log')

# Collect allopathic data by group by region and aggregate via maximum function
allopathic_maxperformance_data=allopathic_data.groupby(["District"]).agg(max_cnt=("Performance - Maximum", 'max'))
allopathic_maxperformance_data=allopathic_maxperformance_data.reset_index()
# Select the top 20 domains
allopathic_maxperformance_data=allopathic_maxperformance_data.iloc[0:20]

# Set x,y label, movie name and draw graphic group
ax=sns.scatterplot(data=allopathic_maxperformance_data, x="max_cnt", y="District")
ax.set_xlabel("Performance Maximum")
ax.set_ylabel("District")
ax.set_title("Patient maximum performance Plot")

football_data=pd.read_csv("/content/Fifa_player_football_data.csv")
print(football_data)

ax=sns.histplot(data=football_data, x="Age",kde=True,binwidth=1,color="b")
ax.set_xlabel("Age")
ax.set_ylabel("Total Players")
ax.set_title("Player Vs Age Plot")

football_data_clubwise=football_data
football_data_clubwise=football_data_clubwise[football_data_clubwise["Club"].isin(["FC Barcelona","Chelsea",'Juventus','Real Madrid'])]
# print(football_data_clubwise)

ax=sns.kdeplot(data=football_data_clubwise, x="Age",hue="Club",fill=True)
ax.set_title("Clubwise Player Age Density plots")

football_df = pd.DataFrame(football_data)

def process_value(value):
    value = value.replace('â‚¬', '')

    if value[-1] in ['M', 'K']:
        multiplier = 1000 if value[-1] == 'M' else 1
        value = float(value[:-1]) * multiplier
    elif len(value) == 2:
        value = 0
    else:
        value = float(value)
    return value

football_df['Value'] = football_df['Value'].apply(process_value)
# print(football_df)

sns.histplot(data=football_df, x="Value", hue="Preferred Foot",bins=47, multiple="stack")
plt.xlabel('Value (in thousands)')
plt.ylabel('Frequency (log scale)')
plt.title('Player Value Distribution by Preferred Foot')
plt.yscale('log')
plt.show()

football_international_reputation=(football_data["International Reputation"]-football_data["International Reputation"].mean())/football_data["International Reputation"].std()
# print(football_international_reputation)

qqplot(football_international_reputation,line='s')
plt.title('Q-Q plot for International reputation of players')
plt.show()