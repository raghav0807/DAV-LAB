# -*- coding: utf-8 -*-
"""Assignment8-CS-202151124.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LC1fAIfXVBqCV4eHPU7UGlEHb46sWzqE
"""

#Name - Raghav Agiwal
#Roll No - 202151124


import pandas as pd  # Import pandas library for data manipulation
import numpy as np   # Import numpy library for numerical operations
import matplotlib.pyplot as plt  # Import matplotlib library for plotting
from scipy.stats import norm     # Import norm function from scipy.stats for normal distribution

# Step 1: Read the CSV file and extract the "Height" data
dataset = pd.read_csv('weight-height.csv')  # Load the dataset from CSV file
height_vals = dataset['Height']  # Extract the 'Height' column from the dataset

num_samples = 1000   # Number of samples to generate
sample_size = 100    # Size of each sample

# Step 2: Compute sample means for the given sample size
sample_means = []  # Initialize an empty list to store sample means
for _ in range(num_samples):
    sample = np.random.choice(height_vals, size=sample_size, replace=True)  # Randomly sample with replacement from the height values
    sample_mean = np.mean(sample)  # Compute the mean of the sample
    sample_means.append(sample_mean)  # Append the sample mean to the list

# Step 3: Plot the distribution of sample means and compare with a normal distribution
plt.figure(figsize=(8, 6))  # Set the figure size

plt.hist(sample_means, bins=30, density=True, alpha=0.6, color='g')  # Plot the histogram of sample means
plt.xlabel('Height')  # Set x-axis label
plt.ylabel('Frequency')  # Set y-axis label

# Plotting normal distribution for comparison
mu = sum(sample_means) / len(sample_means)  # Calculate the mean of sample means
sigma = (sum((x - mu) ** 2 for x in sample_means) / len(sample_means)) ** 0.5  # Calculate the standard deviation of sample means

# Define x values
xmin, xmax = plt.xlim()  # Get the limits of x-axis
x_values = np.linspace(xmin, xmax, 100)  # Generate evenly spaced x values

# Calculate normal distribution values
pdf = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-(x_values - mu) ** 2 / (2 * sigma ** 2))

# Plot normal distribution
plt.plot(x_values, pdf, 'k', linewidth=2)  # Plot the normal distribution curve
plt.show()  # Display the plot

# Number of bootstrap samples
num_resamples = 1000

# Perform bootstrap resampling
resamples = []  # Initialize an empty list to store bootstrap samples
for _ in range(num_resamples):
    # Generate a bootstrap sample by sampling with replacement from the original data
    resample = np.random.choice(height_vals, size=len(height_vals), replace=True)
    # Store the bootstrap sample
    resamples.append(resample)

bootstrap_sample_means = [np.mean(sample) for sample in resamples]  # Calculate the mean of each bootstrap sample

confidence_interval = np.percentile(bootstrap_sample_means, [2.5, 97.5])  # Calculate the confidence interval

print(confidence_interval)  # Print the confidence interval