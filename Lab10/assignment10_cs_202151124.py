# -*- coding: utf-8 -*-
"""Assignment10_CS_202151124.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hWfIq3ZAvJ-Di5JyXF7WmvTuz7rr1D4k
"""

#Raghav Agiwal
#202151124
#Lab10


import pandas as pd  # Importing pandas library for data manipulation
import matplotlib.pyplot as plt  # Importing matplotlib library for data visualization
import random  # Importing random module for generating random numbers
import seaborn as sns  # Importing seaborn library for enhanced data visualization
import numpy as np  # Importing numpy library for numerical computing

# Loading the dataset into a pandas DataFrame
game_df = pd.read_csv('cookie_cats.csv')
game_df.head()  # Displaying the first few rows of the DataFrame

# 1. Determining the preferred game version by computing the average "total rounds played".
v1_mean, v2_mean = game_df.groupby('version')['sum_gamerounds'].mean()  # Calculating mean of total rounds played for each version
if v1_mean > v2_mean:
    print('Version 1 demonstrates a higher average sum of rounds played')  # Printing if version 1 has a higher average sum of rounds played
else:
    print('Version 2 demonstrates a higher average sum of rounds played')  # Printing if version 2 has a higher average sum of rounds played

# 2. Conducting permutation resampling to determine if the difference in average of "total rounds played" is statistically significant.

# Defining a function for permutation resampling with a modified name
def conduct_permutation_resampling(data, size_A, size_B):
    total_size = size_A + size_B
    indices_B = set(random.sample(range(total_size), size_B))  # Randomly selecting indices for version B
    indices_A = set(range(total_size)) - indices_B  # Indices for version A
    return data.loc[list(indices_B)].mean() - data.loc[list(indices_A)].mean()  # Calculating the difference in means

size_A = game_df[game_df['version'] == 'gate_30']['sum_gamerounds'].count()  # Counting samples in version 'gate_30'
size_B = game_df[game_df['version'] == 'gate_40']['sum_gamerounds'].count()  # Counting samples in version 'gate_40'

# Performing permutation resampling 1000 times
differences = [conduct_permutation_resampling(game_df['sum_gamerounds'], size_A, size_B) for i in range(1000)]

# Plotting the histogram
plt.hist(differences, bins=11, rwidth=0.9)  # Creating a histogram of the differences
plt.axvline(x=v1_mean - v2_mean, color='red', linestyle='--')  # Adding a vertical line at the observed difference
plt.xlabel('Difference in average sum of rounds played')  # Labeling x-axis
plt.ylabel('Frequency')  # Labeling y-axis
plt.show()  # Displaying the histogram

# Calculating observed difference and probability value
observed_diff = game_df[game_df['version'] == 'gate_30']['sum_gamerounds'].mean() - game_df[game_df['version'] == 'gate_40']['sum_gamerounds'].mean()  # Calculating observed difference
p_value = sum([1 for d in differences if abs(d) >= abs(observed_diff)]) / len(differences)  # Computing probability value

# Printing the observed difference and probability value
print("The observed difference is:", observed_diff)
print("The probability value is:", p_value)


'''
The p-value serves as a crucial metric in statistical hypothesis testing, particularly in scenarios where
we compare two groups or conditions. In this context, a p-value greater than the conventional significance
level of 0.05 implies that the observed difference between the groups is not statistically significant.

Essentially, it suggests that the variation we observe could very likely occur due to random chance rather
than being a genuine effect of the factor we're studyingâ€”in this case, the change from gate_30 to gate_40 in a gaming environment.

The null hypothesis, which states that there is no difference between the groups, cannot be rejected based on this p-value criterion.
Therefore, we must accept the null hypothesis, indicating that there is no substantial difference in the average number of game rounds
played by users between the two gates.
Consequently, we conclude that transitioning from gate_30 to gate_40 doesn't seem to have a significant impact on user behavior
in terms of gameplay duration.
In summary, while the statistical analysis suggests no substantial impact of the version change on gameplay rounds,
it's essential to consider other factors and conduct additional research to gain a comprehensive understanding of user behavior in response to such modifications.

'''





"""# New Section"""